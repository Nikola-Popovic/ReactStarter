parameters:
  - name: name
    type: string
  - name: displayName
    type: string
  - name: environment
    type: string
  - name: artifactName
    type: string
  - name: condition
    type: string

stages:
  - stage: ${{ parameters.name }}
    dependsOn: BuildPackage
    displayName: ${{ parameters.displayName }}
    condition: and(succeeded(), ${{ parameters.condition }})
    variables:
      - group: Starter-Common
      - ${{ if eq(parameters.environment, 'prd') }}:
          - group: Starter-Prod
      - ${{ if eq(parameters.environment, 'stg') }}:
        - group: Starter-Staging
      - ${{ if eq(parameters.environment, 'dev') }}:
        - group: Starter-Dev
      - name: environment
        value: '${{ parameters.environment }}'
      - name: StarterTemplatePath
        value: '$(Pipeline.Workspace)/${{ parameters.artifactName }}/templates'

    jobs:
      - deployment: DeployStarter
        displayName: 'Deploy Skokla ${{ parameters.environment }}'
        environment: ${{ parameters.environment }}
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: 'Create or Update Azure Infrastructure'
                  inputs:
                    azureSubscription: $(ServicePrincipalName)
                    scriptType: pscore
                    scriptLocation: inlineScript
                    inlineScript: |
                      az --version
                      $rgExists = az group exists -n "rg-$(ApplicationName)-$(environment)"
                      az deployment sub create --location $(Location) `
                        --template-file "$(Pipeline.Workspace)\${{ parameters.artifactName }}\bicep\main.bicep" `
                        --parameters environment=$(environment) `
                        applicationName=$(ApplicationName) `
                        location=$(Location) `
                        resourceGroupExists=$rgExists `
                        failOverLocation=$(FailOverLocation)
                - task: CmdLine@2
                  inputs:
                    script: |
                      echo "Pipeline.Workspace:"
                      echo "$(Pipeline.Workspace)"
                      ls -d $(Pipeline.Workspace)
                      echo "Find Pipeline.Workspace "
                      find "$(Pipeline.Workspace)/"
                - task: AzureStaticWebApp@0
                  displayName: 'Deploy static spa website'
                  inputs:
                    workingDirectory: '$(Pipeline.Workspace)'
                    app_location: '/${{ parameters.artifactName }}/clientApp'
                    output_location: ''
                    skip_app_build: true
                    verbose: true
                    azure_static_web_apps_api_token: $(SWADeploymentToken)
                  #env: # Add environment variables here